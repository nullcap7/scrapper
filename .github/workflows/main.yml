name: Run M3U Scraper

on:
  workflow_dispatch:
  schedule:
    - cron: "*/30 * * * *"

jobs:
  scrape:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install latest Puppeteer
        run: npm install puppeteer@latest

      - name: Create scraper script
        run: |
          cat << 'EOF' > scraper.js
          const puppeteer = require('puppeteer');
          const fs = require('fs');

          (async () => {
            const browser = await puppeteer.launch({
              headless: true,
              args: ['--no-sandbox', '--disable-setuid-sandbox']
            });
            const page = await browser.newPage();
            await page.setUserAgent(
              'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0 Safari/537.36'
            );

            const playlistLinks = new Set();

            // Capture network requests
            page.on('request', request => {
              const url = request.url();
              if (url.match(/\.m3u8(\?.*)?$/i)) {
                playlistLinks.add(url);
              }
            });

            await page.goto('https://www.gledaitv.fan/nova-live-tv.html', {
              waitUntil: 'networkidle2'
            });
            await new Promise(resolve => setTimeout(resolve, 5000));

            // Scan page HTML for any .m3u8 links
            const html = await page.content();
            const regex = /https?:\/\/[^\s'"]+\.m3u8[^\s'"]*/gi;
            const matches = html.match(regex);
            if (matches && matches.length > 0) {
              matches.forEach(link => playlistLinks.add(link));
            }

            await browser.close();

            if (playlistLinks.size === 0) {
              console.error('No .m3u8 links found');
              process.exit(1);
            }

            // Save as JSON array
            const jsonData = {
              updated: new Date().toISOString(),
              urls: Array.from(playlistLinks)
            };
            fs.writeFileSync('playlist.json', JSON.stringify(jsonData, null, 2));
            console.log('Playlist links saved to playlist.json:', jsonData.urls);
          })();
          EOF

      - name: Run scraper
        run: node scraper.js

      - name: Commit & Push JSON
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add playlist.json
          git commit -m "Update playlist links" || echo "No changes to commit"
          git push
