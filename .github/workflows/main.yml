name: Run M3U Scraper

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */1 * * *"
    - cron: "*/30 * * * *"

jobs:
  scrape:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install latest Puppeteer
        run: npm install puppeteer@latest

      - name: Create scraper script
        run: |
          cat << 'EOF' > scraper.js
          const puppeteer = require('puppeteer');
          const fs = require('fs');

          (async () => {
            const browser = await puppeteer.launch({
              headless: true,
              args: ['--no-sandbox', '--disable-setuid-sandbox']
            });
            const page = await browser.newPage();

            const customUA = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36';
            await page.setUserAgent(customUA);

            let playlistLink = null;
            let playlistHeaders = null;

            page.on('request', request => {
              const url = request.url();
              // Only grab playlist.m3u8, ignore chunks.m3u8
              if (url.match(/playlist\.m3u8(\?.*)?$/i) && !playlistLink) {
                playlistLink = url;
                playlistHeaders = request.headers();
              }
            });

            await page.goto('https://tvmaniabg.com/nova-tv/', { waitUntil: 'networkidle2' });
            await new Promise(resolve => setTimeout(resolve, 5000));

            // If not found via network, scan HTML
            if (!playlistLink) {
              const html = await page.content();
              const regex = /https?:\/\/[^\s'"]+playlist\.m3u8[^\s'"]*/gi;
              const matches = html.match(regex);
              if (matches && matches.length > 0) {
                playlistLink = matches[0];
                playlistHeaders = {
                  'referer': 'https://tvmaniabg.com/nova-tv/',
                  'user-agent': customUA,
                  'origin': 'https://tvmaniabg.com'
                };
              }
            }

            await browser.close();

            if (!playlistLink) {
              console.error('No playlist link found');
              process.exit(1);
            }

            // Format headers like you want (capitalized names + line breaks)
            const formattedHeaders = [];
            if (playlistHeaders['referer']) {
              formattedHeaders.push(\`Referer: \${playlistHeaders['referer']}\`);
            }
            if (playlistHeaders['user-agent']) {
              formattedHeaders.push(\`User-Agent: \${playlistHeaders['user-agent']}\`);
            }
            if (playlistHeaders['origin']) {
              formattedHeaders.push(\`Origin: \${playlistHeaders['origin']}\`);
            }

            const headerOutput = formattedHeaders.join('\\n');

            // Save as JSON
            const jsonData = { 
              updated: new Date().toISOString(), 
              url: playlistLink,
              headers: headerOutput
            };

            fs.writeFileSync('playlist.json', JSON.stringify(jsonData, null, 2));
            console.log('Playlist link + headers saved to playlist.json:\\n', jsonData);
          })();
          EOF

      - name: Run scraper
        run: node scraper.js

      - name: Commit & Push JSON
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add playlist.json
          git commit -m "Update playlist link" || echo "No changes to commit"
          git push
